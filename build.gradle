plugins {
  id 'java'
  id 'org.springframework.boot' version '2.7.7'
  id 'io.spring.dependency-management' version '1.1.5'
  id "org.sonarqube" version "4.4.1.3373"
  id 'checkstyle'
  id 'jacoco'
}

group = 'com.codechallenge.scotiabank'
version = '1.0.0-SNAPSHOT'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}


checkstyle {
  toolVersion = '10.12.4'
  configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
  sourceSets = [sourceSets.main]
  ignoreFailures = false
}

tasks.named('build') {
  dependsOn checkstyleMain
}

dependencies {
  // Spring dependencies
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap:3.1.8'
  implementation 'org.springframework.cloud:spring-cloud-config-client:3.1.8'
  implementation 'io.springfox:springfox-boot-starter:3.0.0'
  implementation 'org.springframework:spring-context-indexer:5.1.4.RELEASE'
  implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
  implementation 'org.springdoc:springdoc-openapi-common:1.6.9'

  // Swagger dependencies
  implementation 'io.swagger:swagger-annotations:1.6.6'
  implementation 'io.swagger.core.v3:swagger-annotations:2.2.7'

  //Jetbrains annotations
  implementation 'org.jetbrains:annotations:24.0.0'

  // Lombok dependencies
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'

  // Database dependencies
  implementation 'io.r2dbc:r2dbc-h2'

  // Test dependencies
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'io.projectreactor:reactor-test'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
  testImplementation "org.mockito:mockito-inline:3.11.2"
  testImplementation "org.mockito:mockito-junit-jupiter:3.11.2"
  testImplementation "org.assertj:assertj-core:3.21.0"
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

sonar {
    properties {
        property "sonar.projectName", "CodeChallenge"
        property "sonar.projectKey", "CodeChallenge12345"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.language", "java"
        property "sonar.sources", "src/main"
        property "sonar.tests", "src/test"
        property "sonar.login", "sqp_1d2b93a46b3a8c17b7dafe55df3213bcbc77d8f2"
        property "sonar.token", "sqp_1d2b93a46b3a8c17b7dafe55df3213bcbc77d8f2"
        property "sonar.projectVersion","1.0"
        property "sonar.gradle.skipCompile", "true"
    }
}

test {
  finalizedBy('jacocoTestReport')
  jacoco {
    enabled = true
    destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
    includes = []
    excludes = []
    excludeClassLoaders = []
    includeNoLocationClasses = false
    sessionId = "<auto-generated value>"
    dumpOnExit = true
    classDumpDir = null
    output = JacocoTaskExtension.Output.FILE
    address = "localhost"
    port = 6300
    jmx = false
  }
}

jacoco {
  toolVersion = "0.8.11"
  reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
  dependsOn test
  reports {
    xml.required = false
    csv.required = false
    html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
  }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        minimum = 0.5
      }
    }

    rule {
      enabled = false
      element = 'CLASS'
      includes = ['org.gradle.*']

      limit {
        counter = 'LINE'
        value = 'TOTALCOUNT'
        maximum = 0.3
      }
    }
  }
}
tasks.register('applicationCodeCoverageReport', JacocoReport) {
    executionData test
    sourceSets sourceSets.main
}

tasks.named('test') {
  useJUnitPlatform()
}

